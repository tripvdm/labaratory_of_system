package org.example;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.util.Random;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

class MainTest {
    private static Main main;

    @BeforeAll
    public static void init() {
        main = new Main();
    }

    @DisplayName("Проверка сериалиазция для однозначных чисел с диапазоном до 50, 100, 500, 900")
    @ParameterizedTest
    @MethodSource("generateRandomNumbersForOneDigit")
    void testSerializeArrayToStringWhenNumberConsistOfOneDigit(int[] arr) throws IOException {
        byte[] bytes = convertIntToByte(arr);
        String str = main.serializeToString(bytes);

        assertNotNull(str);
        assertTrue(str.length() > 100);
    }

    @DisplayName("Проверка сериалиазция для двузначных чисел с диапазоном до 50, 100, 500, 900")
    @ParameterizedTest
    @MethodSource("generateRandomNumbersForTwoDigits")
    void testSerializeArrayToStringWhenNumberConsistOfTwoDigit(int[] arr) throws IOException {
        byte[] bytes = convertIntToByte(arr);
        String str = main.serializeToString(bytes);

        assertNotNull(str);
        assertTrue(str.length() > 100);
    }

    @DisplayName("Проверка сериалиазция для трехзначных чисел с диапазоном до 50, 100, 500, 900")
    @ParameterizedTest
    @MethodSource("generateRandomNumbersForThreeDigits")
    void testSerializeArrayToStringWhenNumberConsistOfThreeDigit(int[] arr) throws IOException {
        byte[] bytes = convertIntToByte(arr);
        String str = main.serializeToString(bytes);

        assertNotNull(str);
        assertTrue(str.length() > 100);
    }

    @DisplayName("Проверка десериализации для массива однозначных чисел с возможным из диапазонов(50, 100, 500, 900)")
    @Test
    void testDeserializeMaxArrayToStringWhenNumberConsistOfOneDigit() {
        String str = "rO0ABXVyAAJbQqzzF/gGCFTgAgAAeHAAAAfQAAAABAAAAAcAAAAAAAAABAAAAAcAAAAEAAAACAAAAAcAAAAGAAAAAAAAAAUAAAAFAAAAAwAAAAMAAAAJAAAACAAAAAEAAAAIAAAABQAAAAkAAAAIAAAAAAAAAAMAAAACAAAAAAAAAAcAAAAGAAAABAAAAAAAAAACAAAAAwAAAAAAAAAHAAAACQAAAAUAAAAJAAAABgAAAAMAAAAFAAAACAAAAAYAAAAAAAAABgAAAAcAAAACAAAABgAAAAEAAAAGAAAAAgAAAAEAAAABAAAABwAAAAIAAAABAAAABwAAAAcAAAADAAAABAAAAAQAAAAEAAAACQAAAAkAAAABAAAABAAAAAcAAAAHAAAABwAAAAAAAAABAAAABgAAAAUAAAABAAAACAAAAAIAAAAHAAAACAAAAAAAAAAFAAAAAgAAAAIAAAAFAAAAAwAAAAYAAAABAAAABAAAAAYAAAAFAAAABAAAAAgAAAADAAAABQAAAAgAAAAHAAAACQAAAAgAAAAJAAAABwAAAAkAAAADAAAABQAAAAMAAAAGAAAACAAAAAEAAAAAAAAABAAAAAYAAAAGAAAABwAAAAcAAAAFAAAACQAAAAYAAAADAAAACAAAAAEAAAAIAAAAAAAAAAEAAAABAAAABwAAAAcAAAAHAAAAAQAAAAIAAAABAAAACQAAAAYAAAAEAAAAAgAAAAAAAAAGAAAABgAAAAEAAAAJAAAABAAAAAgAAAADAAAABAAAAAgAAAAJAAAAAAAAAAkAAAAIAAAACQAAAAcAAAAAAAAABQAAAAIAAAAHAAAABQAAAAQAAAAEAAAACAAAAAQAAAADAAAAAQAAAAIAAAAAAAAACQAAAAEAAAAJAAAAAgAAAAIAAAAEAAAAAQAAAAMAAAAJAAAAAQAAAAQAAAADAAAAAgAAAAMAAAAIAAAAAgAAAAYAAAADAAAABwAAAAcAAAAEAAAABAAAAAMAAAAFAAAAAQAAAAIAAAAEAAAAAgAAAAcAAAAHAAAAAgAAAAgAAAAJAAAABQAAAAAAAAAHAAAAAwAAAAkAAAADAAAABAAAAAcAAAAEAAAABgAAAAUAAAAGAAAAAAAAAAIAAAAFAAAAAAAAAAIAAAAHAAAACAAAAAgAAAAHAAAABAAAAAYAAAACAAAABQAAAAEAAAAEAAAAAgAAAAUAAAAEAAAAAgAAAAAAAAAHAAAABgAAAAAAAAAAAAAACAAAAAUAAAACAAAACAAAAAAAAAAHAAAACQAAAAcAAAAFAAAABgAAAAcAAAAAAAAAAQAAAAYAAAADAAAAAwAAAAUAAAAGAAAABAAAAAkAAAABAAAACAAAAAAAAAAEAAAACAAAAAEAAAAGAAAABQAAAAMAAAAHAAAACAAAAAYAAAAHAAAAAAAAAAUAAAAGAAAABAAAAAEAAAAEAAAABgAAAAcAAAAJAAAABwAAAAQAAAAGAAAABgAAAAkAAAAGAAAABQAAAAcAAAAAAAAABgAAAAkAAAAIAAAACAAAAAAAAAADAAAABAAAAAcAAAAGAAAAAgAAAAIAAAAJAAAAAAAAAAMAAAACAAAACQAAAAQAAAAFAAAAAQAAAAYAAAAAAAAAAgAAAAMAAAAJAAAABQAAAAQAAAAEAAAAAAAAAAAAAAADAAAAAgAAAAIAAAAGAAAABQAAAAIAAAAHAAAABQAAAAkAAAAJAAAABwAAAAUAAAAEAAAAAAAAAAUAAAADAAAABwAAAAAAAAAEAAAACQAAAAMAAAAFAAAABQAAAAkAAAADAAAAAgAAAAgAAAAIAAAAAwAAAAAAAAAHAAAAAgAAAAcAAAAIAAAAAgAAAAEAAAAGAAAABQAAAAUAAAADAAAACAAAAAMAAAAJAAAAAAAAAAcAAAAIAAAABQAAAAYAAAACAAAABAAAAAgAAAAEAAAABAAAAAYAAAAAAAAABQAAAAMAAAADAAAABgAAAAMAAAADAAAAAwAAAAYAAAABAAAAAwAAAAEAAAAFAAAACAAAAAIAAAAEAAAAAAAAAAQAAAAIAAAABwAAAAAAAAABAAAABwAAAAAAAAACAAAAAwAAAAUAAAAHAAAAAAAAAAQAAAABAAAACAAAAAIAAAAEAAAAAgAAAAMAAAAJAAAACAAAAAEAAAADAAAABQAAAAUAAAADAAAAAwAAAAMAAAADAAAAAAAAAAMAAAAEAAAABQAAAAYAAAAJAAAABgAAAAgAAAAGAAAAAQAAAAEAAAABAAAAAAAAAAgAAAACAAAAAwAAAAkAAAADAAAAAAAAAAkAAAAGAAAACAAAAAQAAAAJAAAABQAAAAAAAAAIAAAACAAAAAkAAAAFAAAABAAAAAcAAAAJAAAACAAAAAMAAAAGAAAABQAAAAAAAAAJAAAABQAAAAEAAAAIAAAACQAAAAgAAAACAAAACAAAAAQAAAAIAAAABgAAAAMAAAAAAAAABwAAAAMAAAAHAAAABAAAAAMAAAAHAAAABgAAAAUAAAAFAAAAAAAAAAkAAAACAAAACAAAAAkAAAAEAAAABAAAAAEAAAAEAAAABwAAAAYAAAAHAAAABQAAAAUAAAAAAAAABgAAAAMAAAAAAAAACAAAAAUAAAACAAAABQAAAAIAAAAAAAAABwAAAAYAAAAEAAAAAgAAAAYAAAAAAAAAAwAAAAg=";
        byte[] array = main.deserializeToArray(str);

        assertTrue(array.length > 0);
        assertTrue(array.length < str.length());
    }

    @DisplayName("Проверка десериализации для массива двузначных чисел с возможным из диапазонов(50, 100, 500, 900)")
    @Test
    void testDeserializeMaxArrayToStringWhenNumberConsistOfTwoDigit() {
        String str = "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";
        byte[] array = main.deserializeToArray(str);

        assertTrue(array.length > 0);
        assertTrue(array.length < str.length());
    }

    @DisplayName("Проверка десериализации для массива трехзначных чисел с возможным из диапазонов(50, 100, 500, 900)")
    @Test
    void testDeserializeMaxArrayToStringWhenNumberConsistOfThreeDigit() {
        String str = "rO0ABXVyAAJbQqzzF/gGCFTgAgAAeHAAAA+gAAADggAAAbQAAAC7AAADGAAAAUoAAAG5AAACSAAAAd4AAALnAAACBQAAAxIAAAJAAAAAigAAASwAAALgAAABQwAAAKgAAAM6AAABiwAAAioAAADGAAAA4wAAAZQAAAMNAAAA0QAAAWQAAAGqAAABVgAAALQAAAG/AAADYQAAA2UAAAFIAAACfQAAAQoAAAC0AAACagAAAqgAAALjAAAB0gAAAWkAAADHAAAAjwAAAGcAAAHYAAACMAAAAf0AAAODAAABOAAAAjgAAAD0AAAB4QAAAR0AAAEdAAACaAAAA30AAAEmAAAC+gAAAhcAAAHjAAACsAAAAYgAAABzAAABwAAAAcMAAAFpAAABPQAAA3gAAAKZAAABgwAAAPkAAAIJAAAAvQAAAmsAAABlAAAAngAAAbIAAANrAAADGgAAAN8AAAH4AAADIgAAAnIAAAD6AAABYAAAAgoAAAI7AAAA4AAAAPgAAAGEAAAB5wAAAbEAAAINAAAB8wAAATAAAAJaAAABpQAAA28AAACQAAAAcAAAAxEAAAMxAAAAewAAAg0AAAK5AAAAlgAAAV8AAAMhAAABEwAAAIQAAACuAAABJwAAAPwAAAGPAAAByAAAAzAAAAEWAAABBAAAAq4AAAGWAAACxwAAAyEAAANBAAABJwAAASAAAAJEAAACHQAAAXgAAALyAAADFgAAAXsAAANFAAAA4AAAAosAAAHRAAACaAAAApgAAAHFAAABRAAAAZQAAAHwAAAC4gAAAO4AAAN9AAAA/wAAAI4AAAJBAAABLwAAAKYAAAIoAAABNgAAAnMAAADoAAADDQAAAucAAAE/AAACsgAAAb0AAAFeAAADYAAAALkAAAJNAAACuQAAAwgAAACpAAADIwAAAuoAAAIdAAABwAAAAzUAAAEtAAAC3wAAAn0AAAKtAAADIAAAAogAAAIoAAAB9QAAAewAAAKEAAABpQAAAyEAAAG5AAACeQAAAXUAAALsAAABKgAAAIsAAAKHAAAA1wAAAmgAAAOBAAABhAAAAl4AAAE5AAAChQAAAdQAAAHVAAABaQAAAxMAAAL5AAADcQAAARsAAAGNAAAC+QAAAVMAAAImAAADAgAAAcMAAALjAAAAewAAAJwAAAMqAAADOwAAAIMAAADfAAAAegAAA1cAAAJgAAAC+AAAAtsAAABsAAAC5QAAAhUAAALqAAAA7QAAAggAAACAAAABfQAAANYAAAFaAAABRQAAASwAAADXAAAAZAAAATsAAAFPAAAAvgAAAnAAAAGlAAAAiQAAAooAAAHMAAAA4wAAAv0AAANyAAADPwAAAaUAAAFwAAAA4gAAAQIAAADHAAABKQAAARgAAAKqAAADKAAAA0AAAACoAAABNwAAAuoAAAGvAAABBQAAAYYAAAJeAAACfAAAAOUAAAJYAAADTwAAAIAAAAE2AAADKAAAAgkAAAHzAAACAgAAAkUAAAMPAAAArQAAA1oAAAG7AAACggAAAgYAAAEWAAABaAAAA3cAAAI1AAABZQAAAegAAAFjAAACtwAAAWcAAAECAAAAtgAAAp0AAAHuAAACmQAAASEAAAIbAAABxAAAAQQAAAFTAAAApAAAAUkAAAFvAAABRwAAAcwAAAN2AAABmgAAAIwAAAJUAAABVwAAAWIAAAIGAAABgQAAAwUAAAEgAAADbwAAAnoAAAHyAAAAvQAAAQIAAAJUAAAC/QAAAcYAAAMjAAACiwAAAI8AAADcAAACUwAAAc4AAACTAAAA1QAAAhIAAAG0AAABwQAAAr8AAANzAAABxwAAAIgAAAE3AAAAqgAAANoAAAHLAAACigAAAtMAAANcAAABlgAAAqUAAAJNAAABRwAAALEAAAKOAAADJwAAAYAAAAC/AAAAnwAAAMwAAAMNAAABUQAAASoAAAIrAAADOgAAA14AAAMRAAACwQAAAscAAAFfAAAAwwAAAOUAAAJuAAABVgAAA3kAAAMeAAABPgAAAOQAAAC4AAACwAAAATYAAAHEAAAA7AAAAYYAAAOBAAADUQAAAOcAAAKHAAAA1wAAAP8AAAChAAADMAAAAYsAAAJRAAACsAAAA0UAAAE1AAADeAAAAzwAAAMaAAAAvQAAAaEAAAF0AAAAjQAAAbwAAAIZAAAA0QAAAb0AAANOAAADgwAAA1cAAAJkAAACtgAAAKgAAADYAAACkQAAAtYAAAI+AAAC0QAAAyIAAAHVAAAB0AAAAb8AAAMSAAACUAAAAnEAAAEoAAABwwAAAQwAAAHDAAACCgAAAggAAAH7AAACUQAAAzcAAALJAAADNAAAAO8AAAMyAAACJAAAAg0AAAHsAAAA/wAAApIAAAMLAAAAlAAAAPkAAANwAAACsgAAAL0AAAKBAAABLAAAAOEAAAHWAAAAlAAAAuUAAAMeAAADfQAAAisAAAMYAAAA2gAAAjIAAAMnAAADgAAAAR4AAANYAAABkgAAA2kAAACFAAAA8gAAAwwAAADKAAACtAAAA4EAAAGaAAABWgAAAwgAAAD/AAACAAAAAwsAAAE5AAAB4AAAAo8AAAE5AAABdQAAAm0AAAB9AAACLwAAAv0AAALyAAACCwAAAUMAAAMhAAACPgAAAiIAAALEAAACzQAAAScAAAIDAAABbQAAA4AAAAMhAAACuAAAAPkAAAJvAAAB9wAAAVYAAAHzAAAAZwAAAysAAAJXAAAByAAAAOUAAACFAAACCAAAAo0AAAD1AAADfAAAA30AAAG7AAACIAAAAN4AAAIQAAADawAAATIAAAIGAAABzQAAAZ0AAANpAAABWQAAAzgAAAN/AAAAuQAAAs4AAAFTAAACywAAAHQAAAG9AAADCgAAAwEAAAIPAAACcQAAArgAAAJxAAAArwAAAu0AAADjAAADPQAAA1IAAALrAAAA8gAAAxkAAABoAAADHQAAAq4AAAEiAAABcgAAAbUAAAFrAAACJgAAAh8AAAGqAAABbAAAAUUAAAEoAAACmAAAAewAAAF+AAADgwAAA4EAAAIxAAACAQAAAa4AAAEqAAABRgAAA2YAAAInAAAB7AAAA1UAAACqAAADMAAAApUAAAGEAAAC5QAAAjcAAAOAAAABywAAAOIAAAMWAAACuwAAAfUAAAK7AAABzQAAA2gAAAB1AAACaAAAAZ0AAAJqAAADfQAAAkUAAAH6AAADEQAAA3wAAACRAAABlgAAA2gAAAKiAAACXQAAALgAAAC3AAADdgAAAUAAAAC0AAACwQAAANUAAAM1AAAAhAAAAqYAAABmAAAC0wAAAywAAAHlAAABMwAAAQQAAACVAAAAdwAAAbQAAACjAAAAogAAAaUAAAN/AAACRQAAAnQAAAJgAAABHAAAAyIAAAEwAAACJQAAA1UAAADuAAACHgAAATkAAACDAAAC0QAAAr4AAAFuAAABTQAAAN0AAAHRAAADTAAAA3EAAAMsAAACbQAAAfsAAAGZAAACjwAAANQAAAGWAAAC1QAAAiUAAACAAAACbgAAAZ0AAAEUAAADcQAAAjMAAADAAAADcgAAAN4AAALYAAABQwAAAI0AAAHdAAACaQAAARMAAADCAAADXQAAAtQAAAFDAAAA2QAAAawAAAHSAAACVQAAAlUAAACDAAAB8AAAApUAAAK3AAABtQAAAfgAAAMAAAACNgAAAQUAAAHUAAABkQAAATsAAACPAAAB6QAAAcgAAADCAAABVwAAAsMAAAGoAAADJgAAAUgAAAHFAAABDQAAAzYAAANeAAACFQAAAokAAAEuAAAC8AAAAkQAAAF5AAACTwAAASsAAANTAAAB2AAAALUAAAHGAAABlwAAAxsAAALQAAACOgAAAmYAAAITAAACEwAAAJIAAAGAAAACIAAAAHoAAAHeAAADXgAAAe0AAAMmAAADHQAAAHQAAAJ7AAACYgAAAwYAAAGrAAABNAAAAewAAANiAAACWwAAAr0AAADrAAABqgAAAKQAAADzAAABeQAAAWAAAAIfAAACxgAAAfEAAANnAAABqgAAAS4AAAG/AAACMQAAAMsAAAGIAAABegAAAT4AAAG/AAAAzgAAAmYAAADaAAACyQAAAYoAAAD0AAAB6AAAAM0AAAB6AAACKgAAA2MAAAE5AAABPwAAAzEAAAKpAAABuAAAAKAAAAICAAADWAAAARQAAABtAAACeAAAAkkAAAN/AAABkAAAAKQAAANoAAADEgAAAbsAAADmAAAA0QAAAmYAAAJbAAADBwAAA2YAAACwAAADOwAAAd8AAAGZAAABeAAAAf4AAALtAAACiAAAAvAAAADaAAACmAAAApcAAABrAAADewAAASEAAAIyAAAB4QAAAxsAAALXAAABiwAAAJcAAAGCAAACuwAAAZkAAAM0AAACZAAAAlUAAAIdAAABlwAAAn8AAADaAAAAoQAAA3sAAANMAAABrAAAAisAAAKPAAACpgAAApYAAACYAAABnQAAAfoAAACrAAAC8gAAAUwAAAIiAAAAsAAAAlwAAALqAAABwgAAAvYAAAK9AAABKgAAAo4AAAEpAAACvQAAAegAAACJAAABQwAAArAAAAMRAAAC3AAAAUAAAAMZAAAB9gAAA4IAAAJpAAABDQAAAtoAAACMAAADAgAAAyEAAANhAAAB8AAAAagAAAF1AAACWAAAAfwAAAKzAAABMgAAAQ8AAAL4AAAAbQAAA2QAAANZAAAC1wAAATQAAAElAAABnAAAAKwAAADFAAADPwAAAWMAAANjAAAA0gAAAqIAAAH3AAACyAAAAmkAAAKYAAADAQAAASAAAAIbAAACIwAAAkMAAALuAAAAgQAAArIAAAIoAAAA4AAAARAAAAKeAAADWgAAAm4AAAMKAAADHQAAAdAAAAL0AAADYAAAAIMAAAJwAAABmgAAAQcAAAGNAAAB4gAAAuoAAAIuAAACxAAAAn4AAADQAAABIQAAAQ8AAADkAAADWwAAAeIAAAGMAAACSgAAAREAAAFzAAAC0AAAAxgAAAEVAAADOAAAApEAAAFlAAABcQAAAboAAAF3AAADEwAAAlMAAACYAAADNAAAAxUAAAKAAAACfwAAAU0AAAITAAAA8gAAAbsAAAMrAAAAqgAAARAAAAKuAAAAvwAAAY0AAAIoAAABcwAAAdMAAAGEAAAB9gAAA0MAAAFRAAABHgAAAfgAAAFuAAADHgAAAZgAAACRAAAC7gAAAr4AAANEAAAAagAAAdMAAAClAAADTgAAAsoAAACAAAACzQAAAI8AAALKAAAAzwAAAUoAAADTAAACDwAAA3MAAAGtAAABZAAAA2gAAANBAAABYgAAAn4AAAJhAAABzg==";
        byte[] array = main.deserializeToArray(str);

        assertTrue(array.length > 0);
        assertTrue(array.length < str.length());
    }

    static byte[] convertIntToByte(int arr[]) {
        ByteBuffer byteBuffer = ByteBuffer.allocate(arr.length * 4);
        IntBuffer intBuffer = byteBuffer.asIntBuffer();
        intBuffer.put(arr);

        return byteBuffer.array();
    }

    static Stream<int[]> generateRandomNumbersForOneDigit() {
        int[] firstRandomInterval = IntStream.generate(() -> new Random().nextInt(10)).limit(50).toArray();
        int[]  secondRandomInterval = IntStream.generate(() -> new Random().nextInt(10)).limit(100).toArray();
        int[]  thirdRandomInterval = IntStream.generate(() -> new Random().nextInt(10)).limit(500).toArray();
        int[]  fourthsRandomInterval = IntStream.generate(() -> new Random().nextInt(10)).limit(1000).toArray();
        return Stream.of(firstRandomInterval, secondRandomInterval,  thirdRandomInterval, fourthsRandomInterval);
    }

    static Stream<int[]> generateRandomNumbersForTwoDigits() {
        int[]  firstRandomInterval = IntStream.generate(() -> new Random().nextInt(90) + 10).limit(50).toArray();
        int[]  secondRandomInterval = IntStream.generate(() -> new Random().nextInt(90) + 10).limit(100).toArray();
        int[]  thirdRandomInterval = IntStream.generate(() -> new Random().nextInt(90) + 10).limit(500).toArray();
        int[]  fourthsRandomInterval = IntStream.generate(() -> new Random().nextInt(90) + 10).limit(1000).toArray();
        return Stream.of(firstRandomInterval, secondRandomInterval,  thirdRandomInterval, fourthsRandomInterval);
    }

    static Stream<int[]> generateRandomNumbersForThreeDigits() {
        int[] firstRandomInterval = IntStream.generate(() -> new Random().nextInt(800) + 100).limit(50).toArray();
        int[]  secondRandomInterval = IntStream.generate(() -> new Random().nextInt(800) + 100).limit(100).toArray();
        int[]  thirdRandomInterval = IntStream.generate(() -> new Random().nextInt(800) + 100).limit(500).toArray();
        int[]  fourthsRandomInterval = IntStream.generate(() -> new Random().nextInt(800) + 100).limit(1000).toArray();
        return Stream.of(firstRandomInterval, secondRandomInterval,  thirdRandomInterval, fourthsRandomInterval);
    }
}